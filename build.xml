<?xml version="1.0"?>
<project name="destinygg" default="build">

	<target name="package" depends="readcomposerproperties">
		<property name="build.dir" value="${basedir}/../destiny_packages/${composer.version}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/tmp" />
		<mkdir dir="${build.dir}/log" />
		<antcall target="clean" />
		<antcall target="copybuild" />
		<antcall target="compressstatic" />
		<zip destfile="${basedir}/../destiny_packages/destiny.${composer.version}.zip" basedir="${build.dir}" />
		<delete dir="${build.dir}"/>
	</target>
		
	<target name="install" depends="readcomposerproperties">
		<property name="build.dir" value="${basedir}/../destiny_build" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/tmp" />
		<mkdir dir="${build.dir}/log" />
		<antcall target="clean" />
		<antcall target="copybuild" />
		<antcall target="copyvendor" />
		<antcall target="compressstatic" />
	</target>
	
	<target name="build" depends="readcomposerproperties">
		<property name="build.dir" value="${basedir}/../destiny_build" />
		<antcall target="clean" />
		<antcall target="copybuild" />
	</target>
	
	<target name="clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build.dir}" includes="**/**" excludes="tmp/**,log/**,vendor/**" />
		</delete>
	</target>

	<target name="compressstatic">
		<antcall target="concatcss" />
		<antcall target="concatjavascript" />
		<antcall target="compresscss" />
		<antcall target="compressjavascript" />
	</target>

	<target name="copyvendor">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build.dir}" includes="vendor/**" />
		</delete>
		<copy todir="${build.dir}/vendor" includeEmptyDirs="false">
			<fileset dir="vendor" excludes="/nervo/,**/.git/,**/tests/,**/samples/,**/examples/,**/doc/,**/bin/,**/.travis.yml,**/VERSION**,**/CHANGELOG.**,**/README.**,**/FAQ.**,**/CONTRIBUTING.**,**/LICENSE**,**/composer.json"/>
		</copy>
	</target>
	
	<target name="copybuild">
		<copy todir="${build.dir}/lib">
			<fileset dir="lib" />
		</copy>
		<copy todir="${build.dir}/public">
			<fileset dir="public" />
		</copy>
		<copy todir="${build.dir}/static">
			<fileset dir="static" />
		</copy>
		<copy todir="${build.dir}/cron">
			<fileset dir="cron" />
		</copy>
		<copy todir="${build.dir}/config">
			<fileset dir="config" />
		</copy>
		<copy todir="${build.dir}/">
			<fileset file="composer.json" />
		</copy>
	</target>
	
	<target name="concatcss">
		<property name="destpath" value="${build.dir}/static/css/" />
		<property name="file" value="destiny.${composer.version}.css" />
		<concat destfile="${destpath}${file}">
			<fileset dir="${destpath}" includes="*.css" />
		</concat>
		<delete><fileset dir="${destpath}" excludes="${file}" includes="*.css" /></delete>
	</target>
	
	<target name="concatjavascript">
		<property name="destpath" value="${build.dir}/static/js/" />
		<property name="file" value="destiny.${composer.version}.js" />
		<concat destfile="${destpath}${file}">
			<fileset dir="${destpath}" includes="*.js" />
		</concat>
		<delete><fileset dir="${destpath}" excludes="${file}" includes="*.js" /></delete>
	</target>
	
	<target name="compresscss">
		<antcall target="compress">
			<param name="file" value="${build.dir}/static/css/destiny.${composer.version}.css" />
		</antcall>
		<antcall target="compress">
			<param name="file" value="${build.dir}/static/css/errors/errors.css" />
		</antcall>
	</target>
	
	<target name="compressjavascript">
		<antcall target="compress">
			<param name="file" value="${build.dir}/static/js/destiny.${composer.version}.js" />
		</antcall>
	</target>
	
	<target name="compress">
		<description>Compresses/Minifies javascript and css</description>
		<java jar="vendor/nervo/yuicompressor/yuicompressor.jar" fork="true">
			<arg value="${file}" />
			<arg value="-o" />
			<arg value="${file}" />
			<arg value="--nomunge" />
		</java>
		<echo>Compressed... ${file}</echo>
	</target>
	
	<target name="readcomposerproperties">
		<property name="composer.file" value="${basedir}/composer.json" />
		<description>Reads a composer.json file and put the first level of the json array on the global ant properties</description>
		<script language="javascript" setbeans="true">
		<![CDATA[
			importClass(java.io.File);
			importClass(java.io.FileReader);
			importClass(java.io.BufferedReader);
			importClass(java.io.FileWriter);
			importClass(java.io.BufferedWriter);
			var composerfile = project.getProperty("composer.file");
			var file = new File(composerfile);
			var fr = new FileReader(file);
			var br = new BufferedReader(fr);
			var json = "";
			while ((strLine = br.readLine()) != null){
				json += strLine;
			}
			var struct = eval("("+json+")");
			for (i in struct) {
				if(struct[i] instanceof Object)
					continue;
				echo = project.createTask("echo");
				echo.setMessage(i + "=" + struct[i]);
				echo.perform();
				project.setProperty("composer."+i, struct[i]);
			}
		]]>
		</script>
	</target>

</project>